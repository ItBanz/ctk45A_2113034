<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        ooCJnLxRQGkXjCDFFA4BOB7RRQO9bFFFIj//2Q==
</value>
  </data>
</root>